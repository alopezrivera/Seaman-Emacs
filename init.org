#+STARTUP: overview
#+FILETAGS: :emacs:


#+begin_src emacs-lisp

;;; -*- lexical-binding: t; -*-

#+end_src

#+begin_src emacs-lisp

    ;;; -*- lexical-binding: t; -*-
  
  (defcustom config "home"
    "Emacs configuration of choice")

  (defcustom config-directory "~/.emacs.d/"
    "Emacs configuration directory")

  (defcustom initial-buffer-choice ""
    "Buffer displayed at startup")

  (defcustom startup-buffers '()
    "Buffers opened at startup")

#+end_src

#+title:Emacs Configuration File
#+STARTUP: overview
#+FILETAGS: :emacs:
#+PROPERTY: header-args:emacs-lisp :results none :tangle ./init.el :mkdirp yes

#+begin_src emacs-lisp

(defvar config "home")

(defvar config-directory "~/.emacs.d/")

(defvar initial-buffer-choice "")

(defvar startup-buffers '())

#+end_src

* Local

#+begin_src emacs-lisp

;; local.el
(let ((local (concat config-directory "local/local--" (system-name) ".el")))
  (if (file-exists-p local)
      (load-file local)
    (write-region ";; local emacs config" nil local)))

#+end_src

* Custom

#+begin_src emacs-lisp

;; custom.el
(setq custom-file (concat config-directory "persistent/custom.el"))
(load custom-file)

#+end_src

** Credentials

#+begin_src emacs-lisp

;; credentials
(load-file (concat config-directory "creds.el.gpg"))

#+end_src

* Declare

#+begin_src emacs-lisp

(provide 'init)

#+end_src


