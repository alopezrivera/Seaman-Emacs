#+STARTUP: overview
#+FILETAGS: :emacs:




#+title:Theme
#+PROPERTY: header-args:emacs-lisp :results none :mkdirp yes



* Modules
** Themes
*** Nano
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-nano-theme.el
:END:

#+begin_src emacs-lisp

(straight-use-package 'nano-theme)
(require 'nano-theme)

#+end_src

*** Doom
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-doom-themes.el
:END:

#+begin_src emacs-lisp

(straight-use-package 'doom-themes)
(require 'doom-themes)

#+end_src

*** Modus
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-modus-themes.el
:END:

#+begin_src emacs-lisp

(straight-use-package 'modus-themes)
(modus-themes-load-themes)

#+end_src

Commit 64c8009 of July the 8th 2022 dresses Org Mode titles with a ghastly cyan
in ~modus-operandi~, and a strident turquoise in ~modus-vivendi~. This can be undone
by passing the ~monochrome~ attribute to 0th level heading in ~modus-themes-headings~.

#+begin_src emacs-lisp

(setq modus-themes-headings
      '((0 . (monochrome))))

#+end_src

*** Standalone
**** Sweet
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-sweet-theme.el
:END:

#+begin_src emacs-lisp

(straight-use-package 'sweet-theme)
(require 'sweet-theme)

#+end_src

**** Chocolate
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-chocolate-theme.el
:END:

#+begin_src emacs-lisp

(straight-use-package 'chocolate-theme)
(require 'chocolate-theme)

#+end_src

** Mode lines
*** Nano
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-nano-modeline.el
:END:

#+begin_src emacs-lisp

;; nano-modeline
(straight-use-package 'nano-modeline)

#+end_src

*** Doom
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-doom-modeline.el
:END:

#+begin_src emacs-lisp

;; doom-modeline
(straight-use-package 'doom-modeline)

#+end_src

*** Spaceline
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-spaceline.el
:END:

#+begin_src emacs-lisp

(straight-use-package 'spaceline)
(require 'spaceline-config)

#+end_src

** Switch
*** circadian
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../modules/shapes-circadian.el
:END:

#+begin_src emacs-lisp

(setq calendar-latitude      52.00667)
(setq calendar-longitude     4.355561)
(setq calendar-loadtion-name "Delft")
(setq calendar-standard-time-zone-name "CEST")
(setq calendar-daylight-time-zone-name "CET")

(straight-use-package 'circadian)
(setq circadian-themes `((:sunrise . ,light)  
			    (:sunset  . ,dark)))
(circadian-setup)

#+end_src



* Outfits
** Themes
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../outfits/shapes-themes.el
:END:

#+begin_src emacs-lisp

(shapes-module "nano-theme")
(shapes-module "doom-themes")
(shapes-module "modus-themes")
(shapes-module "sweet-theme")
(shapes-module "chocolate-theme")

#+end_src

** Mode lines
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../outfits/shapes-mode-lines.el
:END:

#+begin_src emacs-lisp

(shapes-module "nano-modeline")
(shapes-module "doom-modeline")
(shapes-module "spaceline")

#+end_src


* Extensions
:PROPERTIES:
:header-args:emacs-lisp: :tangle ../extensions/shapes-theme.el
:END:
** Switch
*** Hook

#+begin_src emacs-lisp

(defvar custom/load-theme-hook nil
   "`load-theme' hook.")

(defun custom/load-theme-hook (&rest _args)
   "Run `load-theme-hook'."
   (run-hooks 'custom/load-theme-hook))

(advice-add 'load-theme :after #'custom/load-theme-hook)

#+end_src

**** Org Mode

#+begin_src emacs-lisp

;; reload Org Mode
(defun custom/org-theme-reload ()
  (if (custom/in-mode "org-mode")
      (org-mode)
    (progn
      (setq window (get-buffer-window (current-buffer)))
      (cl-loop for buffer in (custom/visible-buffers)
	             collect (select-window (get-buffer-window buffer))
	 	     if (custom/in-mode "org-mode")
		        collect (org-mode))
      (select-window window))))

(add-hook 'custom/load-theme-hook #'custom/org-theme-reload)

#+end_src

*** Toggle

#+begin_src emacs-lisp

(defun custom/theme-toggle ()
  "Toggle between `dark' and `light' themes
using `enable-theme'"
  (interactive)
  (let ((theme (nth 0 custom-enabled-themes)))
    (cond ((string-equal theme light) (progn (disable-theme light)
					        (load-theme    dark)))
	     (t                          (progn (disable-theme theme)
						(load-theme    light))))))

(global-set-key (kbd "C-t") 'custom/theme-toggle)

#+end_src

** Customization
*** Mode line

#+begin_src emacs-lisp

;; Bar
(setq-default doom-modeline-bar-width 0.01)

;; Color
(defun custom/modeline-color (bg bg-in face face-in)
  "Set the color of the mode and header lines and blend the 
`doom-modeline-bar' with the background."
  (set-face-attribute 'mode-line          nil :foreground face    :background bg    :box nil)
  (set-face-attribute 'mode-line-inactive nil :foreground face-in :background bg-in :box nil)
  ;; header line
  (set-face-attribute 'header-line        nil :foreground face    :background bg    :box nil))

(defun custom/dark-modeline ()
  "Mode line for light themes."
  (custom/modeline-color "#3d3d3d" "#000000" "#cfcfcf" "#cfcfcf"))

(defun custom/light-modeline ()
  "Mode line for dark themes."
  (custom/modeline-color "#fff0ff" "#ededed" "#616161" "#878787"))

#+end_src

*** Line numbers

#+begin_src emacs-lisp

(defun custom/dark-line-numbers ()
  "Line numbers for light themes."
  (set-face-attribute 'line-number nil :foreground "#cfcfcf" :background "#262626"))

(defun custom/light-line-numbers ()
  "Line numbers for dark themes."
  (set-face-attribute 'line-number nil :foreground "#878787" :background "#ededed"))

#+end_src

*** Theme-specific advice
**** Light

#+begin_src emacs-lisp

(defun custom/light-advice ()
  (custom/light-modeline)
  (custom/light-line-numbers))

#+end_src

**** Dark

#+begin_src emacs-lisp

(defun custom/dark-advice ()
  (custom/dark-modeline)
  (custom/dark-line-numbers))

#+end_src

**** Add

#+begin_src emacs-lisp

(defun custom/theme-specific-advice (orig-fun &rest args)
  "Apply theme-specific advice when enabling themes, and
preserve modeline status through theme changes."
  (setq modeline-status mode-line-format)
  (apply orig-fun args)
  (let ((theme (nth 0 args)))
    (if (string-match-p "modus\\|nano" (symbol-name theme))
	   (cond ((string-equal theme light) (custom/light-advice))
 		 ((string-equal theme dark)  (custom/dark-advice)))))
  (setq mode-line-format modeline-status))

;; enable-theme
(advice-add 'load-theme :around #'custom/theme-specific-advice)

#+end_src

