#+STARTUP: overview
#+FILETAGS: :emacs:




#+title:Org Diary
#+PROPERTY: header-args:emacs-lisp :results none :tangle ./org-diary.el :mkdirp yes

Org Mode paragraphs hitch-hiking their way to first class structural
editing citizenship.

~org-paragraph~ is a minor mode for Emacs Org Mode which adds primitives
to manipulate paragraphs using the Org Mode struct infrastructure.
Out of the box, org-paragraph adds paragraph support to ~org-metaright~,
~org-metaleft~, ~org-metaup~ and ~org-metadown~.

* Setup
** Mode

#+begin_src emacs-lisp

;;; org-paragraph.el --- Paragraphs passing as items -*- lexical-binding: t -*-

;; Copyright (C) Antonio López Rivera

;; Author: Antonio Lópezr Rivera <antonlopezr99@gmail.com>
;; Maintainer: Antonio Lópezr Rivera <antonlopezr99@gmail.com>
;; Created: 2022
;; Version: 0.1
;; Package-Requires: ((emacs "27.1"))
;; Homepage: https://github.com/alopezrivera/org-paragraph

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Org Mode parargaphs hitch-hiking their way to first class
;; structural editing citizenship.
;; org-paragraph works behind the scenes to make `org-metaright',
;; `org-metaleft', `org-metaup' and `org-metadown' work for
;; paragraphs.

;;; Code:

(defgroup custom/org-diary-mode-group nil
  "Group for customization"
  :prefix "custom/org-diary-")

(define-minor-mode custom/org-diary-mode
  "Org Diary minor mode."
  :init-value 1
  :lighter " Diary"
  :group 'custom/org-diary-mode-group

  (when (bound-and-true-p custom/org-diary-mode)
    (custom/org-diary-typeset))
  (when (not (bound-and-true-p custom/org-diary-mode))
    (custom/org-diary-font-lock-remove)
    (variable-pitch-mode 0)))

(define-globalized-minor-mode custom/org-diary-global-minor-mode custom/org-diary-mode custom/org-diary-mode :group 'custom/org-diary-mode-group)

#+end_src

** Variables

#+begin_src emacs-lisp

(defcustom custom/org-diary-directory "/home/diary/"
  "Org Diary directory."
  :group 'custom/org-diary-mode-group
  :type 'boolean)

(defcustom custom/org-diary-navigate-in-current-dir t
  "If the current buffer is an `org-diary' buffer, this variable
determines whether `org-diary-prior' and `org-diary-next' will
search (or create) the prior or next `org-diary' entry in the directory
of the current buffer as opposed to in `org-diary-directory'.
Setting this variable to t is useful to navigate directories with
notes in `org-diary' format."
  :group 'custom/org-diary-mode-group
  :type 'boolean)

(defcustom custom/org-diary-time-format-file  "%d-%m-%Y"
  "Org Diary time format: file names."
  :group 'custom/org-diary-mode-group
  :type 'string)

(defcustom custom/org-diary-time-format-title "%d/%m/%Y"
  "Org Diary time format: entry titles."
  :group 'custom/org-diary-mode-group
  :type 'string)

(defcustom custom/org-diary-visit-in-new-window t
  "Open diary entries in new window."
  :group 'custom/org-diary-mode-group
  :type 'boolean)

(defcustom custom/org-diary-new-window-fraction 0.25
  "New Org Diary window width as a fraction of the frame width."
  :group 'custom/org-diary-mode-group
  :type 'float)

#+end_src

** Functions

#+begin_src emacs-lisp

(defun custom/org-diary-file-format (&optional dir)
  "Org Diary file name format."
  (let ((dir  (or dir
		     (if (and custom/org-diary-navigate-in-current-dir buffer-file-name)
			 (file-name-directory buffer-file-name)
		       custom/org-diary-directory)))
	   (file custom/org-diary-time-format-file))
  (concat dir file ".org")))

#+end_src

* Display
** Window
*** TODO org-diary-new-window

- new window always on right of frame

#+begin_src emacs-lisp

(defun custom/org-diary-new-window ()
  (split-window-horizontally)
  (windmove-right)
  (if (not (ignore-errors (custom/org-diary-resize-window)))
      (delete-other-windows)))

#+end_src

*** org-diary-resize-window

#+begin_src emacs-lisp

(defun custom/org-diary-resize-window ()
  (interactive)
  (custom/window-resize-fraction custom/org-diary-new-window-fraction 60))

#+end_src

** Typeset

#+begin_src emacs-lisp

(defun custom/org-diary-typeset ()
  (variable-pitch-mode)
  (custom/org-diary-font-lock-add))

#+end_src

** Typefaces
*** font-lock
**** hh:mm

#+begin_src emacs-lisp

(defface custom/org-diary-typeface-hhmm
  '((nil :foreground "#eb07b6" :inherit 'fixed-pitch))
  "Org Diary typeface for hh:mm time stamps."
  :group 'custom/org-diary-mode-group)

(defcustom custom/org-diary-keyword-hhmm '("[0-9]\\{2\\}:[0-9]\\{2\\}$" . 'custom/org-diary-typeface-hhmm)
  "Org Diary hh:mm typeface keyword."
  :group 'custom/org-diary-mode-group)

#+end_src

**** keywords

#+begin_src emacs-lisp

(defcustom custom/org-diary-keywords (list custom/org-diary-keyword-hhmm)
  "Org Diary font-lock keywords.")

#+end_src

**** font-lock-add

#+begin_src emacs-lisp

(defun custom/org-diary-font-lock-add ()
  (font-lock-add-keywords nil custom/org-diary-keywords)
  (font-lock-fontify-buffer))

#+end_src

**** font-lock-remove

#+begin_src emacs-lisp

(defun custom/org-diary-font-lock-remove ()
  (font-lock-remove-keywords nil custom/org-diary-keywords)
  (font-lock-fontify-buffer))

#+end_src

** TODO Line padding

- mouse click bug -> cursor about 2 lines below mouse

#+begin_src emacs-lisp :tangle nil

(defcustom custom/org-diary-line-padding 1.25
  "Org Diary line padding factor."
  :group 'custom/org-diary-mode-group)

(defun custom/org-diary-line-padding ()
  "Set padding between Org Diary entry lines."
  ;; remove padding overlays if they already exist
  (let ((overlays (overlays-at (point-min))))
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay 'is-padding-overlay)
            (delete-overlay overlay)))
      (setq overlays (cdr overlays))))
  ;; add a new padding overlay
  (let ((padding-overlay (make-overlay (point-min) (point-max))))
    (overlay-put padding-overlay 'is-padding-overlay t)
    (overlay-put padding-overlay 'line-spacing (* .1 custom/org-diary-line-padding))
    (overlay-put padding-overlay 'line-height (+ 1 (* .1 custom/org-diary-line-padding))))
  (setq mark-active nil))

#+end_src

* Internal
** Time
*** TODO org-diary-parse-time

1. find separator indices in time string
    - <any code><separator>% -> regex match group
    - assoc list ((code . pos in time list))
2. split string at each separator -> list of values
3. parallel lists -> ("<code 1>" ...) ("<value 1>" ...)
4. transform assoc list -> ("<code 1>" . decode-method-1)
5. decode string chunks to time values
     
   for i in range <parallel lists>
       time-value-list[i] = (apply (assoc tr-assoc-list code-list[i]) value-list[i])
         
6. sort codes to match time list order -> apply sort to value list

-----

- auxiliary variables: year, month, day, hour, minute, second
   - assoc list ((code . auxiliary-variable))
   - if auxiliary variable written -> do not overwrite (in case of redundant codes such as %u (numeric day of the week) and %a (abbreviated name of the day of the week)

for code in codes
   if regex-match %code
      sep = regex-match %code<sep>% else(eol) ""
      value = regex-match %code<value><sep>
      time-value = (apply (assoc tr-assoc-list code-list[i]) value-list[i])
      (setq (assoc code-auxv-dict code) time-value)
aux variables -> time list

-----
#+title:Draft (rough)

#+begin_src emacs-lisp

(defun custom/org-diary-parse-time (string)
  "Parse time string. Currently hardcoded to parse time
strings in the format `%d/%m/%Y'."
  (let ((dmy (cl-loop for n in (split-string string "/")
		            collect (string-to-number n))))
    (encode-time (list 0 0 0 (nth 0 dmy) (nth 1 dmy) (nth 2 dmy) nil nil nil))))

#+end_src

*** org-diary-time-string-file

#+begin_src emacs-lisp

(defun custom/org-diary-time-string-file (time &optional dir)
  (format-time-string (custom/org-diary-file-format dir) time))

#+end_src

*** org-diary-time-string-title

#+begin_src emacs-lisp

(defun custom/org-diary-time-string-title (time)
  (format-time-string custom/org-diary-time-format-title time))

#+end_src

** Queries
*** TODO org-diary-buffer-entry

- generalize for different file time string formats

#+begin_src emacs-lisp

(defun custom/org-diary-buffer-entry (buffer)
  (string-match-p "^[0-9]\\{2\\}\\-[0-9]\\{2\\}\\-[0-9]\\{4\\}\\.org" (file-name-nondirectory buffer)))

#+end_src

*** org-diary-in-entry

#+begin_src emacs-lisp

(defun custom/org-diary-in-entry ()
  "Return t if current buffer is an `custom/org-diary-buffer-entry'."
  (ignore-errors (custom/org-diary-buffer-entry buffer-file-name)))

#+end_src

*** org-diary-entry-time

#+begin_src emacs-lisp

(defun custom/org-diary-entry-time ()
  (let ((title (custom/org-get-title-current-buffer)))
    (custom/org-diary-parse-time title)))

#+end_src

*** org-diary-entry-time

#+begin_src emacs-lisp

(defun custom/org-diary-entry-date ()
  "Retrieve the time of the current Org Diary
file in `custom/org-diary-time-format-file'."
  (custom/org-diary-time-string-file (custom/org-diary-entry-time)))

#+end_src

*** org-diary-entry-unsaved-buffer

#+begin_src emacs-lisp

(defun custom/org-diary-entry-unsaved-buffer (time)
  "Return t if the Org Diary entry for TIME exists
in an unsaved buffer."
  (let ((file (custom/org-diary-time-string-file time)))
    (cl-loop for buffer in (buffer-list)
	           if (and (buffer-file-name buffer)
			   (string-equal file (buffer-file-name buffer))) return t
		   finally return nil)))

#+end_src

* Exploration
** TODO org-diary-browse

#+begin_src emacs-lisp

(defun custom/org-diary-browse ()
  "Org Agenda-like list of diary entries.
Options:
- org-recenter -> show diary at point in side by side window
- enter -> jump to diary entry at point
- quit -> quit and return to previous window config, buffer and visibility
  - org-agenda -> save current window config, visibility"
  (interactive))

#+end_src

** TODO org-diary-thoughts

- Two buffers
   - Diary buffer list
   - Long form content
      - Separators
         - -----
      - Lazy load
         1. show buffer list
         2. get long-form content from buffer if desired
             1. Save as aux
             2. Delete when closing
- Functions
   - Exports
      - select thoughts for export
      - org-capture selected thoughts

* Navigation
** TODO org-diary-visit

- new window always on right of frame
- if any org-diary window is open, visit in that window

#+begin_src emacs-lisp

(defun custom/org-diary-visit (time &optional arg dir)
  "Open the Org Diary entry corresponding to the specified time.
-             '(0):  noselect
- C-u         '(4):  visit in current buffer
- C-u C-u     '(16): save new entry after initialiation
- C-u C-u C-u '(64): visit in current buffer and save new entry after initialization"
  (interactive)
  (let ((entry          (custom/org-diary-time-string-file time dir))
	   (save           (or (equal arg '(16)) (equal arg '(64))))
	   (noselect       (equal arg '(1)))
	   (current-buffer (if arg
			       (or (equal arg '(4)) (equal arg '(64)))
			     (or (not custom/org-diary-visit-in-new-window)
				 (< (window-width) 70)
				 (custom/org-diary-in-entry)))))
       ;; Whether to initialize the diary entry
       (setq init (not (or (file-exists-p entry) (custom/org-diary-entry-unsaved-buffer time))))
       ;; Open entry
       (if noselect
	       (find-file-noselect entry)
	     (if current-buffer
		 (find-file entry)
	       (progn (split-window-horizontally)
		      (windmove-right)
		      (find-file entry)
	              (if (not (ignore-errors (custom/org-diary-resize-window)))
			  (delete-other-windows)))))
       ;; Initialize
       (if init (custom/org-diary-init time))
       ;; Save buffer
       (if (and init save) (save-buffer))
       ;; Enable `org-diary-mode'
       (custom/org-diary-mode)
       ;; Go to end of buffer
       (end-of-buffer)))

#+end_src

** org-diary-today

#+begin_src emacs-lisp

(defun custom/org-diary-today (&optional arg)
  "Open the Org Diary entry for today, creating it if
it does not exist."
  (interactive)
  (custom/org-diary-visit (current-time) arg custom/org-diary-directory))

#+end_src

** org-diary-jump

#+begin_src emacs-lisp

(defun custom/org-diary-jump (number)
  (interactive)
  (let ((custom/org-diary-visit-in-new-window (not (custom/org-diary-in-entry)))
	   (time-jump (time-add (custom/org-diary-entry-time) (days-to-time number))))
    (custom/org-diary-visit time-jump '(4))))

#+end_src

** org-diary-prior

#+begin_src emacs-lisp

(defun custom/org-diary-prior ()
  (interactive)
  (custom/org-diary-jump -1))

#+end_src

** org-diary-next

#+begin_src emacs-lisp
(defun custom/org-diary-next ()
  (interactive)
  (custom/org-diary-jump 1))

#+end_src

* Editing
** Initialization

#+begin_src emacs-lisp

(defun custom/org-diary-init (time)
  "Set up Org Diary entry."
  (interactive)
  (insert (concat "#+title:" (custom/org-diary-time-string-title time) "\n"))
  (insert "#+CREATED: ")
  (org-time-stamp-inactive '(16))
  (insert "\n\n\n"))

#+end_src

** insert-time

#+begin_src emacs-lisp

(defun custom/org-diary-insert-time (format)
  "Insert current time using the given FORMAT."
  (insert (format-time-string format (current-time))))

#+end_src

** insert-hhmm

#+begin_src emacs-lisp

(defun custom/org-diary-insert-time-hhmm ()
  "Insert current time using the given FORMAT."
  (interactive)
  (custom/org-diary-insert-time "%H:%M"))

#+end_src

* Diary

#+begin_src emacs-lisp

(defun custom/org-diary (&optional arg)
  "Org Diary entry point.

Activate when visiting files matching pattern.

Bindings:
- C-<up>   -> previous entry if it exists
- C-<down> -> next entry if it exists
- C-n      -> new entry"
  (interactive)
  (if (custom/org-diary-in-entry)
      (progn (custom/org-diary-mode 0)
	       (bury-buffer)
	       (ignore-errors (delete-window)))
    (progn (custom/org-diary-today arg)
	     (custom/org-diary-mode 1))))

#+end_src

* Startup

#+begin_src emacs-lisp

(add-hook 'org-mode-hook (lambda () (if (custom/org-diary-in-entry) (custom/org-diary-mode))))

#+end_src

* Bindings

#+begin_src emacs-lisp

(global-set-key (kbd "C-c d") 'custom/org-diary)

(define-key org-mode-map (kbd "C-d")       'custom/org-diary-insert-time-hhmm)
(define-key org-mode-map (kbd "C-x w")     'custom/org-diary-resize-window)
(define-key org-mode-map (kbd "C-c t")     'custom/org-diary-today)
(define-key org-mode-map (kbd "C-<prior>") 'custom/org-diary-prior)
(define-key org-mode-map (kbd "C-<next>")  'custom/org-diary-next)

#+end_src

* Declare

#+begin_src emacs-lisp

(provide 'org-diary)
;;; org-modern.el ends here

#+end_src
