# -*- mode: Org; org-use-property-inheritance: t -*-

#+STARTUP: overview
#+FILETAGS: :emacs:


#+title:Initialization
#+PROPERTY: header-args:emacs-lisp :results none :tangle ./init.el :mkdirp yes


* early-init
:PROPERTIES:
:header-args:emacs-lisp: :tangle ./early-init.el
:END:
** Variables

#+begin_src emacs-lisp

(defcustom config "home"
  "Emacs configuration of choice")

(defcustom config-directory "~/.emacs.d/"
  "Emacs configuration directory")

(defcustom startup-buffers '()
  "Buffers opened at startup")

(defcustom spawn-startup-buffers t
  "Whether to spawn spawn the buffers in the `startup-buffers' list after initialization")

#+end_src

** Customize interface

#+begin_src emacs-lisp

;; customize interface file
(setq custom-file (concat config-directory "persistent/custom.el"))
(load-file custom-file)

#+end_src

** Provide

#+begin_src emacs-lisp

(provide 'early-init)

#+end_src

* init
** Local

#+begin_src emacs-lisp

;; local settings
(let ((local (concat config-directory "local/config/local--" (system-name) ".el")))
  (if (file-exists-p local)
      (load-file local)
    (write-region ";; local emacs config" nil local)))

;; config directory
(setq config-directory (string-replace "~" (getenv "HOME") config-directory))

#+end_src

** Core

#+begin_src emacs-lisp

;; shapes core
(add-to-list 'load-path (concat config-directory "core/"))

(defvar shapes-core-components '("load"
                                 "extensions"
                                 "package-manager"
                                 "config-management"))

(mapc (lambda (component) (require (intern (concat "shapes-core-" component)) (concat "shapes-" component)))
      shapes-core-components)

(message "Shapes: core loaded")

#+end_src

** Config

#+begin_src emacs-lisp

(load-file (concat config-directory "configs/" (concat config ".el")))

#+end_src

** Buffers

#+begin_src emacs-lisp

;; inhibit startup message
(setq inhibit-startup-message t)

;; startup buffers
(defun custom/spawn-startup-buffers ()
  "Spawn startup buffers"
  (cl-loop for buffer in startup-buffers
	      collect (find-file-noselect buffer)))

(if spawn-startup-buffers
    (add-hook 'emacs-startup-hook #'custom/spawn-startup-buffers))

#+end_src

** Credentials

#+begin_src emacs-lisp

;; credentials
(defvar shapes-credentials-map (make-keymap))

(defun shapes-load-credentials ()
  (interactive)
  (let ((credential-file (concat config-directory "creds.el.gpg")))
    (if (file-exists-p credential-file)
        (condition-case nil
            (load-file credential-file)
          (error nil))
      (message "~/creds.el.gpg does not exist")))
  (global-set-key (kbd "C-M-p") shapes-credentials-map))

(global-set-key (kbd "C-M-p") #'shapes-load-credentials)

#+end_src

** Provide

#+begin_src emacs-lisp

(provide 'init)

#+end_src
