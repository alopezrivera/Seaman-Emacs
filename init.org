# -*- mode: Org; org-use-property-inheritance: t -*-

#+STARTUP: overview
#+FILETAGS: :emacs:




#+title:Initialization
#+PROPERTY: header-args:emacs-lisp :results none :tangle ./init.el :mkdirp yes




* early-init
:PROPERTIES:
:header-args:emacs-lisp: :tangle ./early-init.el
:END:
** Variables

#+begin_src emacs-lisp

(defcustom config "home"
  "Emacs configuration of choice")

(defcustom config-directory "~/.emacs.d/"
  "Emacs configuration directory")

(defcustom initial-buffer-choice ""
  "Buffer displayed at startup")

(defcustom startup-buffers '()
  "Buffers opened at startup")

(defcustom spawn-startup-buffers t
  "Whether to spawn spawn the buffers in the `startup-buffers' list after initialization")

#+end_src

** Customize interface

#+begin_src emacs-lisp

;; customize interface file
(setq custom-file (concat config-directory "persistent/custom.el"))
(load-file custom-file)

#+end_src

** Provide

#+begin_src emacs-lisp

(provide 'early-init)

#+end_src

* init
** Local

#+begin_src emacs-lisp

;; local settings
(let ((local (concat config-directory "local/local--" (system-name) ".el")))
  (if (file-exists-p local)
      (load-file local)
    (write-region ";; local emacs config" nil local)))

#+end_src

** Config

#+begin_src emacs-lisp

(defun shapes-load (dir src)
  "Load a shapeshifter configuration file located inside DIR within
 `config-directory', by name"
  (load-file (concat config-directory dir "/shapes-" src ".el")))

;; shapeshifter modules
(defun shapes-module (module)
  "Load a shapeshifter MODULE by name"
  (shapes-load "modules" module))

;; shapeshifter outfits
(defun shapes-outfit (outfit)
  "Load a shapeshifter OUTFIT by name"
  (shapes-load "outfits" outfit))

;; shapeshifter extensions
(defun shapes-extend (extension)
  "Load a shapeshifter EXTENSION by name"
  (shapes-load "extensions" extension))

;; load config
(load-file (concat config-directory "configs/" (concat config ".el")))

#+end_src

** Buffers

#+begin_src emacs-lisp

;; inhibit startup message
(setq inhibit-startup-message t)

;; startup buffers
(defun custom/spawn-startup-buffers ()
  "Spawn startup buffers"
  (cl-loop for buffer in startup-buffers
	      collect (find-file-noselect buffer)))

(if spawn-startup-buffers
    (add-hook 'after-init-hook #'custom/spawn-startup-buffers))

#+end_src

** Credentials

#+begin_src emacs-lisp

;; credentials
(condition-case nil
    (load-file (concat config-directory "creds.el.gpg"))
  (error nil))

#+end_src

** Provide

#+begin_src emacs-lisp

(provide 'init)

#+end_src


