#+STARTUP: overview
#+FILETAGS: :emacs:




#+title:Emacs - Home
#+PROPERTY: header-args:emacs-lisp :results none :tangle ./home.el :mkdirp yes



A single program to jot down notes and write documents and prose.

To write code and do version control.

To keep track and plan tasks and projects, to save contacts.

To manage the configuration of your machine.

To publish to the web, in document form, to manage email.


-----

- diary
- notebook
- zettelkasten
- agenda
- calendar
- contact book
- git client
- IDE

-----

- blog
- LaTeX

* Setup
** Startup
*** Frame

#+begin_src emacs-lisp

;; Initial frame size
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width  . 70))

#+end_src

*** Message

#+begin_src emacs-lisp

;; Inhibit startup message
(setq inhibit-startup-message t)

#+end_src

** General purpose

#+begin_src emacs-lisp

(shapes-extend "general")

#+end_src

** Package manager
*** straight

#+begin_src emacs-lisp

(shapes-module "straight")

#+end_src

*** lockfile

As explained by [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html#3.2.straight_lockfile][Luca Ambiaghi]],

#+begin_quote

We can run M-x ~straight-freeze-versions~ to write the file ~straight/versions/default.el~. The content of the file can then be kept in a code block, under version control. The code block can then be tangle again to ~straight/versions/default.el~. We can then restore package versions using M-x ~straight-thaw-versions~.

#+end_quote

#+begin_src emacs-lisp :tangle ~/.emacs.d/straight/versions/default.el

(("Emacs-wgrep" . "f9687c28bbc2e84f87a479b6ce04407bb97cfb23")
 ("Highlight-Indentation-for-Emacs" . "d88db4248882da2d4316e76ed673b4ac1fa99ce3")
 ("ace-window" . "0577c426a9833ab107bab46c60d1885c611b2fb9")
 ("all-the-icons.el" . "9c90dbaa31a2fdc163e4394514bf9ee359e46ee5")
 ("autothemer" . "1dbc06ad430c51b5ec1a602a808ee46b9bd4bafa")
 ("avy" . "ba5f035be33693d1a136a5cbeedb24327f551a92")
 ("cfrs" . "f3a21f237b2a54e6b9f8a420a9da42b4f0a63121")
 ("circadian.el" . "bf5a00ea45c14dfdcda72c5d9f61bcd230c48159")
 ("company-mode" . "1490c235b96acdbcc3927751473c67c1d32b2148")
 ("compat" . "e1a22bf72ff8af445157db421adae2fbc549b224")
 ("dash.el" . "0ac1ecf6b56eb67bb81a3cf70f8d4354b5782341")
 ("delight" . "70cb8cec9e5eb2c24364e065d85c2ea8f14a587c")
 ("dirvish" . "0f61b3e3f73bdfebe29ea6cab810f71f8c9d3540")
 ("doom-modeline" . "1d1f37c0a73eb131c2fbd44b6b08237760dd4e43")
 ("el-get" . "bf3dba444dcd240b8cb358a0850c8c5a92606134")
 ("el-patch" . "156c61b72c1c9c61bd886b5931b8a382153f52fa")
 ("elisp-refs" . "af73739084637c8ebadad337a8fe58ff4f1d2ec1")
 ("elpy" . "de31d30003c515c25ff7bfd3a361c70c298f78bb")
 ("emacs-calfw" . "03abce97620a4a7f7ec5f911e669da9031ab9088")
 ("emacs-chocolate-theme" . "ccc05f7ad96d3d1332727689bf6250443adc7ec0")
 ("emacs-web-server" . "22ce66ea43e0eadb9ec1d691a35d9695fc29cee6")
 ("emacs-websocket" . "82b370602fa0158670b1c6c769f223159affce9b")
 ("emacs-which-key" . "1ab1d0cc88843c9a614ed3226c5a1070e32e4823")
 ("emacsmirror-mirror" . "ebaa7a97ab71b1af4236e730e54845b380eb1792")
 ("emacsql" . "373975cbccf7776af771e23f86043b236a330702")
 ("epl" . "78ab7a85c08222cd15582a298a364774e3282ce6")
 ("f.el" . "d2019d4f9625bcc44349c69fe46d6645fd9ff4ff")
 ("flycheck" . "c955fd6fb970eed5fdecf675369d3d61a41f6c68")
 ("gnu-elpa-mirror" . "aa9f0535e6e034acd89312ca0de3dd5a20f0f883")
 ("helpful" . "94a07d49a80f66f8ebc54a49a4b4f6899a65fbe3")
 ("ht.el" . "c4c1be487d6ecb353d07881526db05d7fc90ea87")
 ("hydra" . "9e9e00cb240ea1903ffd36a54956b3902c379d29")
 ("let-alist" . "592553db5929b54db40af0df90c5add0aaca045b")
 ("magit" . "acd26dd9f3708602d4c721395d790a4af7937eed")
 ("melpa" . "f1f3d4dc42a050f6d1b466459593fa198cd151c4")
 ("modus-themes" . "2860a94f78154dfdd0b2d01bdf0af7992195f34c")
 ("multiple-cursors.el" . "225fc0e889e094bfd2913cfd448084cb49211ac6")
 ("nano-modeline" . "35276a9139293c42287565d3bf84f46090a86e8e")
 ("nano-theme" . "de3118f14e0fb696983c1c9f93453609010ffd14")
 ("no-littering" . "d9db6d88ccae0727fa96125fae8601cac80efde0")
 ("olivetti" . "8d287a80c5e3d72ac01b56c8afe60b01f18500b4")
 ("org" . "5b45ad083c92f24f0e8a859f1873edc0c6820d74")
 ("org-appear" . "60ba267c5da336e75e603f8c7ab3f44e6f4e4dac")
 ("org-contacts" . "dba21b48952e78e9db27e25628bcfb0353c19b24")
 ("org-fragtog" . "ede4ac61e8cb580f63f882bdee2b0e573cd3dd60")
 ("org-modern" . "239c02aa99dc52755edf38d5e9c9e986683c4249")
 ("org-roam" . "c3867619147175faf89ed8f3e90a1e67a4fd9655")
 ("org-roam-timestamps" . "604fdad0feb61419751d3d6b828cc443a99f418f")
 ("org-roam-ui" . "9474a254390b1e42488a1801fed5826b32a8030b")
 ("ox-rst" . "99fa790da55b57a3f2e9aa187493ba434a64250e")
 ("pfuture" . "f9e67bd7edbd5b4e033efd82c0acc4a85ff860a8")
 ("pkg-info" . "76ba7415480687d05a4353b27fea2ae02b8d9d61")
 ("posframe" . "0d23bc5f7cfac00277d83ae7ba52c48685bcbc68")
 ("powerline" . "566c77844f053cb39fa7acdfbc143a855450f0b5")
 ("projectile" . "2e4105c947610986e08980dcf1a891cf1f4303e1")
 ("pyvenv" . "31ea715f2164dd611e7fc77b26390ef3ca93509b")
 ("rainbow-delimiters" . "a32b39bdfe6c61c322c37226d66e1b6d4f107ed0")
 ("rainbow-mode" . "55a8c15782197cd9db8950d2f5ed1b9caca08dae")
 ("rg.el" . "51596cb516d7af1737d964ffdbb4c4d416d6dfaf")
 ("s.el" . "08661efb075d1c6b4fa812184c1e5e90c08795a9")
 ("shrink-path.el" . "c14882c8599aec79a6e8ef2d06454254bb3e1e41")
 ("spaceline" . "9a81afa52738544ad5e8b71308a37422ca7e25ba")
 ("straight.el" . "4517e118ee43f849f708025dbb2cf4f281793121")
 ("svg-lib" . "1e7834642fb74d4d5b2b84973fbb2095d5b7618b")
 ("svg-tag-mode" . "efd22edf650fb25e665269ba9fed7ccad0771a2f")
 ("sweet-theme" . "78f741806ecebe01224bf54d09ad80e306652508")
 ("swiper" . "2051de5882706246da298ce5f60482cd7f469fe7")
 ("themes" . "d79a41f593c69697af1ddaac971c0c47ecc446a8")
 ("transient" . "a583d2b2f5f8963f08cb5a15a4d4dd55faa13585")
 ("treemacs" . "e80c3020270720ff114f7a2ad62c85e1fb627678")
 ("vundo" . "80f5cb5775bb4120e36b2959db07fc88993eff81")
 ("with-editor" . "cfcbc2731e402b9169c0dc03e89b5b57aa988502")
 ("workgroups.el" . "9572b3492ee09054dc329f64ed846c962b395e39")
 ("yasnippet" . "5cbdbf0d2015540c59ed8ee0fcf4788effdf75b6")
 ("yasnippet-snippets" . "c5bf4c4085aa61b9c07563de89f7aacc2a357db5"))
:beta

#+end_src

** Configuration management
*** Littering

#+begin_src emacs-lisp

(shapes-module "no-littering")

#+end_src

*** Patching

#+begin_src emacs-lisp

(shapes-module "el-patch")

#+end_src

*** Execution

#+begin_src emacs-lisp

(global-set-key (kbd "C-x e") 'eval-buffer)

#+end_src

*** Inspection

#+begin_src emacs-lisp

(global-set-key (kbd "C-c SPC") #'whitespace-mode)

#+end_src

*** Debugging

#+begin_src emacs-lisp

(setq debug-on-error t)

#+end_src

* Modal
** god-mode

#+begin_src emacs-lisp

(shapes-module "god-mode")

#+end_src

* Editing
** Modules
*** vundo

#+begin_src emacs-lisp

(shapes-module "vundo")

#+end_src

*** multiple-cursors

#+begin_src emacs-lisp

(shapes-module "multiple-cursors")

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "editing")

#+end_src

* Session
** desktop

#+begin_src emacs-lisp

(desktop-save-mode 1)

#+end_src

** workgroups

#+begin_src emacs-lisp

(shapes-module "workgroups")

#+end_src

* Display
** Settings
*** Tabs

#+begin_src emacs-lisp

(tab-bar-mode 1)

#+end_src

*** Menus

#+begin_src emacs-lisp

;; Disable visible scroll bar
(scroll-bar-mode -1)

;; Disable toolbar
(tool-bar-mode -1)

;; Disable tooltips
(tooltip-mode -1)

;; Disable menu bar
(menu-bar-mode -1)

#+end_src

*** Frame

#+begin_src emacs-lisp

;; Frame name
(setq-default frame-title-format '("Emacs [%m] %b"))

#+end_src

*** Fringes

#+begin_src emacs-lisp

;; Fringe mode
(set-fringe-mode nil)

#+end_src

*** Warnings
**** Visible bell

#+begin_src emacs-lisp

;; Enable visual bell
(setq visible-bell t)

#+end_src

**** Confirmations

#+begin_src emacs-lisp

(advice-add 'yes-or-no-p :override #'y-or-n-p)

#+end_src

*** TODO Scrolling

- pixel-scroll-precision-mode
   - sudden jumps

- scrolling without moving mark

- sources
   - https://www.reddit.com/r/emacs/comments/6osik2/random_scroll_jumps_in_emacs/
   - https://www.emacswiki.org/emacs/SmoothScrolling

#+begin_src emacs-lisp

(setq scroll-step 1)
(setq scroll-conservatively 101)
(setq scroll-preserve-screen-position 1)

#+end_src

*** Line numbers

#+begin_src emacs-lisp

;; Display line numbers by side
(global-set-key (kbd "C-c l") #'display-line-numbers-mode)

#+end_src

*** Column numbers

#+begin_src emacs-lisp

;; Display column number
(column-number-mode)

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "display")

#+end_src

* Search
** swiper

#+begin_src emacs-lisp

(shapes-module "swiper")

#+end_src

** ripgrep

#+begin_src emacs-lisp

(shapes-module "rg")

#+end_src

* Templates
** yasnippet

#+begin_src emacs-lisp

(shapes-module "yasnippet")

#+end_src

* Guidance
** counsel

#+begin_src emacs-lisp

(shapes-module "counsel")

#+end_src

** helpful

#+begin_src emacs-lisp

(shapes-module "helpful")

#+end_src

** which-key

#+begin_src emacs-lisp

(shapes-module "which-key")

#+end_src

* Navigation
** Settings
*** Frame

#+begin_src emacs-lisp

;; Create new frame
(global-set-key (kbd "C-S-n") #'make-frame-command)

#+end_src

*** Window
**** ace-window

#+begin_src emacs-lisp

;; ace-window
(straight-use-package 'ace-window)
(require 'ace-window)

(global-set-key (kbd "C-x o") 'ace-window)

#+end_src

**** winner-mode

#+begin_src emacs-lisp

;; winner mode
(winner-mode)

#+end_src

**** balance-windows

#+begin_src emacs-lisp

(global-set-key (kbd "C-x -") #'balance-windows)

#+end_src

**** split-width-threshold

#+begin_src emacs-lisp

(setq split-width-threshold 70)

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "navigation")

#+end_src

* Completion
** ivy

#+begin_src emacs-lisp

(shapes-module "ivy")

#+end_src

* Version control
** magit

#+begin_src emacs-lisp

(shapes-module "magit")

#+end_src

* File management
** Settings
*** Buffer backups

~backup-directory-alist~, which determines where backups are saved, is set by ~no-littering~.

#+begin_src emacs-lisp

(setq backup-by-copying t)
(setq version-control t)
(setq delete-old-versions t)
(setq kept-new-versions 2)
(setq kept-old-versions 2)

#+end_src

** Modules
*** dirvish

#+begin_src emacs-lisp

(shapes-module "dirvish")

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "file-management")

#+end_src

* Project interaction
** projectile

#+begin_src emacs-lisp

(shapes-module "projectile")

#+end_src

** treemacs

#+begin_src emacs-lisp

(shapes-module "treemacs")

#+end_src



* UI
** Settings
*** TODO Typefaces

- dpi font size scaling

**** Body

#+begin_src emacs-lisp

;; default face
(set-face-attribute 'default nil        :font "Fira Code Retina" :height 93)

;; fixed pitch face
(set-face-attribute 'fixed-pitch nil    :font "Fira Code Retina" :height 93)

;; variable pitch face
(set-face-attribute 'variable-pitch nil :font "PT Sans"  :height 105 :weight 'regular)

#+end_src

**** Accents

#+begin_src emacs-lisp

;; italic
(defface custom/italic
  '((t :font "Victor Mono" :height  86 :weight  bold :slant italic))
  "Italic typeface")

#+end_src

**** Headings

#+begin_src emacs-lisp

;; titles
(setq typeface-title "Ringbearer")

;; heading face
(setq typeface-heading "Century Gothic")

#+end_src

**** Mode line

#+begin_src emacs-lisp

;; Mode line
(set-face-attribute 'mode-line nil :height 85 :inherit 'fixed-pitch)

#+end_src

*** Mode line
**** Data

#+begin_src emacs-lisp

(display-time-mode t)

#+end_src

** Modules
*** delight

#+begin_src emacs-lisp

(shapes-module "delight")

#+end_src

*** all-the-icons

#+begin_src emacs-lisp

(shapes-module "all-the-icons")

#+end_src

*** rainbow-mode

#+begin_src emacs-lisp

(shapes-module "rainbow-mode")

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "ui")

#+end_src

* Themes
** Settings

#+begin_src emacs-lisp

(setq light    'modus-operandi)

(setq dark     'modus-vivendi)

(setq modeline 'doom-modeline-mode)

#+end_src

*** Mode line

#+begin_src emacs-lisp

(add-hook 'after-init-hook modeline)

#+end_src

** Outfits

#+begin_src emacs-lisp

(shapes-outfit "themes")
(shapes-outfit "mode-lines")

#+end_src

** Modules
*** circadian

#+begin_src emacs-lisp

(shapes-module "circadian")

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "theme")

#+end_src


* IDE
** Modules
*** hideshow

#+begin_src emacs-lisp

(shapes-module "hideshow")

#+end_src

*** company

#+begin_src emacs-lisp

(shapes-module "company")

#+end_src

*** flycheck

#+begin_src emacs-lisp

(shapes-module "flycheck")

#+end_src

*** elpy

#+begin_src emacs-lisp

(shapes-module "elpy")

#+end_src

** Extensions

#+begin_src emacs-lisp

(shapes-extend "ide")

#+end_src

* Shell

#+begin_src emacs-lisp

;; remove duplicates in shell history
(setq comint-input-ignoredups t)

#+end_src

* Org Mode

#+begin_src emacs-lisp

(shapes-module "org")

#+end_src

** Settings
*** UI
**** Text
***** Typefaces
****** Title

#+begin_src emacs-lisp

;; title face

(defun custom/org-typeface-title ()
  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-document-title nil :font typeface-title :height 300 :weight 'regular :foreground 'unspecified)))

(add-hook 'org-mode-hook #'custom/org-typeface-title)

#+end_src

****** Body

#+begin_src emacs-lisp

(defun custom/org-typefaces-body ()
  (with-eval-after-load 'org-faces

    ;; Code
    (set-face-attribute 'org-block                 nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code                  nil                 :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim              nil                 :inherit '(shadow fixed-pitch))

    ;; Tables
    (set-face-attribute 'org-table                 nil                 :inherit '(shadow fixed-pitch))

    ;; Lists
    (set-face-attribute 'org-checkbox              nil                 :inherit 'fixed-pitch)

    ;; Meta
    (set-face-attribute 'org-meta-line             nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'org-document-info         nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'org-document-info-keyword nil                 :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword       nil                 :inherit 'fixed-pitch)))

(add-hook 'org-mode-hook #'custom/org-typefaces-body)

#+end_src

****** Indent

#+begin_src emacs-lisp

(defun custom/org-typeface-indent ()
  "Indent typeface used in `org-indent-mode' and `visual-line-mode'."
  (with-eval-after-load 'org-indent-mode
    (set-face-attribute 'org-indent                nil                 :inherit '(org-hide fixed-pitch))))

(add-hook 'org-mode-hook #'custom/org-typeface-indent)

#+end_src

****** Headings

#+begin_src emacs-lisp

;; use levels 1 through 8
(setq org-n-level-faces 8)

;; do not cycle header style after 8th level
(setq org-cycle-level-faces nil)

;; hide leading stars
(setq org-hide-leading-starts t)

;; font sizes
(defun custom/org-header-setup () 
  (with-eval-after-load 'org-faces

    ;; heading font sizes
    (dolist (face '((org-level-1 . 1.6)
                    (org-level-2 . 1.4)
                    (org-level-3 . 1.3)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.15)
                    (org-level-6 . 1.10)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.00)))
         (set-face-attribute (car face) nil :font typeface-heading :weight 'bold :height (cdr face)))))

(add-hook 'org-mode-hook #'custom/org-header-setup)

#+end_src

***** Indentation

#+begin_src emacs-lisp

(add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))

#+end_src

***** Line-wrapping

#+begin_src emacs-lisp

(add-hook 'org-mode-hook (lambda () (progn (visual-line-mode 1) (setq line-move-visual t))))

#+end_src

**** Ellipses

Candidates:
- triangles
  ▼
  ▾
  ▿
- rhomboids
  ⬙
  ⟡
  ⬥
  ♦
  ♢
- non-compliant
  ⧨
  
-----

#+begin_src emacs-lisp

;; Change ellipsis ("...") to remove clutter
(setq org-ellipsis " ♢")

#+end_src

*** Display
**** Figures

#+begin_src emacs-lisp

(setq org-image-actual-width nil)

#+end_src

**** List indentation

#+begin_src emacs-lisp

;; List indentation
(setq-default org-list-indent-offset 1)

#+end_src

**** Symbols, super- and subscripts

#+begin_src emacs-lisp

;; symbols, super- and subscripts
(setq org-pretty-entities nil)

#+end_src

*** TODO LaTeX

- org LaTeX equations
   - custom array envs
      - cases
         - \arraycolsep=1.4pt\def\arraystretch{1.5}
      - derivations
         - \arraycolsep=3pt\def\arraystretch{2.25}

**** TODO Options

- mail bug in

-----

Importantly, ~modus-vivendi~ will not behave correctly with
the default ~org-format-latex-options~, with LaTeX previews
displaying as white boxes. [[https://debbugs.gnu.org/db/52/52277.html][This has been previously reported]].

~org-format-latex-options~ has ~:foreground~ and ~:background~
attributes. These may be assigned to

- a color,
- ~default~, instructing Org Mode to determine ~:foreground~ or
  ~:background~ from the foreground or background color of the
  default face, or
- ~auto~, doing the same for the text face.

By default, the ~:foreground~ and ~:background~ in ~org-format-latex-options~
are set to ~default~. With default settings, changing the color
of the ~default~ font has the following effects on the LaTeX preview SVGs:

- modus-operandi
   - ~default :foreground~: text color
   - ~default :background~: no effect
- modus-vivendi
   - ~default :foreground~: background color
   - ~default :background~: no effect

By eliminating the ~:background~ attribute from ~org-format-latex-options~
the issue is resolved.

1. ~modus-operandi~ does not suffer from this issue nor do various
   other themes. This makes me believe the issue lies with
   ~modus-vivendi~ itself.
2. However, the ~:background~ attribute in ~org-format-latex-options~
   seems to have no effect, a potential bug in Org Mode

#+begin_src emacs-lisp

(setq org-format-latex-options
        (list :foreground 'default
              :scale      1.2))

#+end_src

**** Header

#+begin_src emacs-lisp

;; Justify equation labels - [fleqn]
;; Preview page width      - 10.5cm
(setq org-format-latex-header
      (string-join '("\\documentclass[fleqn]{article}"
		        "\\usepackage[usenames]{color}"
			
			"\\usepackage{bm}"
			
			"\\pagestyle{empty}"
			"\\setlength{\\textwidth}{10.5cm}"
			"\\addtolength{\\textwidth}{-3cm}"
			"\\setlength{\\oddsidemargin}{1.5cm}"
			"\\addtolength{\\oddsidemargin}{-2.54cm}"
			"\\setlength{\\evensidemargin}{\\oddsidemargin}"
			"\\setlength{\\textheight}{\\paperheight}"
			"\\addtolength{\\textheight}{-\\headheight}"
			"\\addtolength{\\textheight}{-\\headsep}"
			"\\addtolength{\\textheight}{-\\footskip}"
			"\\addtolength{\\textheight}{-3cm}"
			"\\setlength{\\topmargin}{1.5cm}"
			"\\addtolength{\\topmargin}{-2.54cm}")
		   "\n"))

#+end_src

**** Equation preview format

#+begin_src emacs-lisp

;; SVG LaTeX equation preview
(setq org-latex-create-formula-image-program 'dvisvgm)

#+end_src

**** Equation preview directory

#+begin_src emacs-lisp

;; theme-specific LaTeX preview directory
(defun custom/latex-preview-directory ()
  "Set `org-preview-latex-image-directory' to the SVG
LaTeX preview directory of the current theme"
  (setq org-preview-latex-image-directory
   (concat "/tmp/ltximg/" (custom/current-theme) "/")))

#+end_src

**** Equation preview reload hook

#+begin_src emacs-lisp

(defun custom/latex-preview-reload ()
  "Reload all LaTeX previews in buffer,
ensuring the LaTeX preview directory
matches the current theme."
  (if (custom/in-mode "org-mode")
      (progn (org-latex-preview '(64))
	        (custom/latex-preview-directory)
		(org-latex-preview '(16)))))

(add-hook 'org-mode-hook #'custom/latex-preview-reload)

#+end_src

** Modules
*** UI
**** org-modern

#+begin_src emacs-lisp

(shapes-module "org-modern")

#+end_src

**** org-appear

#+begin_src emacs-lisp

(shapes-module "org-appear")

#+end_src

**** org-fragtog

#+begin_src emacs-lisp

(shapes-module "org-fragtog")

#+end_src

*** Editing
**** org-paragraph

#+begin_src emacs-lisp

(shapes-module "org-paragraph")

#+end_src

*** Notes
**** org-diary

#+begin_src emacs-lisp

(shapes-module "org-diary")

#+end_src

**** org-roam

#+begin_src emacs-lisp

(shapes-module "org-roam")

#+end_src

*** Export
**** ox-rst

#+begin_src emacs-lisp

(shapes-module "ox-rst")

#+end_src

*** Agenda
**** org-agenda

#+begin_src emacs-lisp

(shapes-module "org-agenda")

#+end_src

**** org-contacts

#+begin_src emacs-lisp

(shapes-module "org-contacts")

#+end_src

**** org-calendar

#+begin_src emacs-lisp

(shapes-module "org-calendar")

#+end_src

*** Templates
**** org-tempo

#+begin_src emacs-lisp

(shapes-module "org-tempo")

#+end_src

**** org-capture

#+begin_src emacs-lisp

(shapes-module "org-capture")

#+end_src

*** Programming
**** org-babel

#+begin_src emacs-lisp

(shapes-module "org-babel")

#+end_src

** Outfits
*** 
** Extensions

#+begin_src emacs-lisp

(shapes-extend "org")

#+end_src


* Declare

#+begin_src emacs-lisp

;; Conclude initialization file
(provide 'home)

#+end_src
* 
