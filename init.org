# -*- mode: Org; org-use-property-inheritance: t -*-

#+STARTUP: overview
#+FILETAGS: :emacs:


#+begin_src emacs-lisp

;;; -*- lexical-binding: t; -*-

#+end_src


* early-init
:PROPERTIES:
:header-args: emacs-lisp :tangle ./early-init.el
:END:
** Variables

#+begin_src emacs-lisp

;;; -*- lexical-binding: t; -*-

(defcustom config "home"
  "Emacs configuration of choice")

(defcustom config-directory "~/.emacs.d/"
  "Emacs configuration directory")

(defcustom initial-buffer-choice ""
  "Buffer displayed at startup")

(defcustom startup-buffers '()
  "Buffers opened at startup")

#+end_src

** Customize interface

#+begin_src emacs-lisp

;; customize interface file
(setq custom-file (concat config-directory "persistent/custom.el"))
(load-file custom-file)

#+end_src

** Declare

#+begin_src emacs-lisp

(provide 'early-init)

#+end_src

* init
** Local

#+begin_src emacs-lisp

;; local settings
(let ((local (concat config-directory "local/local--" (system-name) ".el")))
  (if (file-exists-p local)
      (load-file local)
    (write-region ";; local emacs config" nil local)))

#+end_src

** Config

#+begin_src emacs-lisp

;; load config
(require (intern config) (concat config-directory "configs/" (concat config ".el")))

#+end_src

** Credentials

#+begin_src emacs-lisp

;; credentials
(load-file (concat config-directory "creds.el.gpg"))

#+end_src

** Declare

#+begin_src emacs-lisp

(provide 'init)

#+end_src


