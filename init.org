#+title:Emacs Configuration File
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :results none :tangle ./init.el :mkdirp yes

* Setup

#+begin_src emacs-lisp

;;; -*- lexical-binding: t; -*-

#+end_src

** Startup
*** Buffer

#+begin_src emacs-lisp

(setq initial-buffer-choice "~/.emacs.d/init.org")

#+end_src

*** Frame

#+begin_src emacs-lisp

;; Initial frame size
(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width  . 70))

#+end_src
*** Directory

#+begin_src emacs-lisp

;; Default directory
(setq default-directory "~/.emacs.d/")

#+end_src

** System information
*** Config directory

#+begin_src emacs-lisp

;; Config directory
(setq config-directory "~/.emacs.d/")

#+end_src

** Package management
*** use-package

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			       ("org"   . "https://orgmode.org/elpa/")
			       ("elpa"  . "https://elpa.gnu.org/packages/")))
(package-initialize)

;; Ensure use-package is installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; use-package
(require 'use-package)

;; If true, Emacs will attempt to download packages in use-package declarations
(setq use-package-always-ensure t)

#+end_src

#+begin_src emacs-lisp :tangle nil

;; Update package database
(package-refresh-contents)

#+end_src

*** Customize interface

#+begin_src emacs-lisp

;; Customize interface code blocks
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

#+end_src

** General purpose functions
*** <>

#+begin_src emacs-lisp

(defun <> (a b c)
  (and (> b a) (> c b)))

#+end_src

*** in-mode

#+begin_src emacs-lisp

(defun custom/in-mode (mode)
  "Return t if Org Mode is currently active."
  (string-equal major-mode mode))

#+end_src

*** active-region

#+begin_src emacs-lisp

;; Retrieve active region
(defun custom/active-region (beg end)
  (set-mark beg)
  (goto-char end)
  (activate-mark)
  )

#+end_src

*** match-regexs

#+begin_src emacs-lisp

(defun custom/match-regexs (string patterns)
  "Return t if all provided regex PATTERNS
(provided as a list) match STRING."
  (cl-loop for pattern in patterns
	   if (not (string-match pattern string))
	     return nil
	   finally return t))

#+end_src

*** current-theme

#+begin_src emacs-lisp

;; Retrieve current theme
(defun custom/current-theme ()
  (substring (format "%s" (nth 0 custom-enabled-themes))))

#+end_src

* Display
** Defaults

#+begin_src emacs-lisp

;; Inhibit startup message
(setq inhibit-startup-message t)

;; Disable visible scroll bar
(scroll-bar-mode -1)

;; Disable toolbar
(tool-bar-mode -1)

;; Disable tooltips
(tooltip-mode -1)

;; Disable menu bar
(menu-bar-mode -1)

#+end_src
** Warnings

#+begin_src emacs-lisp

;; Enable visual bell
(setq visible-bell t)

#+end_src
** Mode line

#+begin_src emacs-lisp

(defun custom/hide-modeline ()
  (interactive)
  (if mode-line-format
      (setq mode-line-format nil)
    (doom-modeline-mode)))

(global-set-key (kbd "M-m") #'custom/hide-modeline)

#+end_src

** Line numbers

#+begin_src emacs-lisp

;; Line numbers: display globally
(global-display-line-numbers-mode t)

;; Display column number
(column-number-mode)

;; Exceptions
(dolist (mode '(org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook
		    undo-tree-visualizer-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Fringes

#+begin_src emacs-lisp

;; Set width of side fringes
(set-fringe-mode 0)

#+end_src

* Guidance
** Search
*** Swiper

#+begin_src emacs-lisp

;; Load Swiper
(use-package swiper)

(require 'swiper)

#+end_src

**** Smart search

#+begin_src emacs-lisp

;; Smart search
(defun custom/search-region (beg end)
  "Search selected region with swiper-isearch."
  (swiper-isearch (buffer-substring-no-properties beg end)))

(defun custom/smart-search (beg end)
  "Search for selected regions. If none are, call swiper-isearch."
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end))
                 (list nil nil)))
  (deactivate-mark)
  (if (and beg end)
      (custom/search-region beg end)
    (swiper-isearch)))

(define-key global-map (kbd "C-s") #'custom/smart-search)

#+end_src

**** Search in region

#+begin_src emacs-lisp

(defun custom/narrow-and-search (beg end)
  (narrow-to-region beg end)
  (deactivate-mark)
  (swiper-isearch))

(defun custom/search-in-region (beg end)
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end))
                 (list nil nil)))
  (if (and beg end)
      (custom/narrow-and-search beg end)
    (swiper-isearch)))

(define-key global-map (kbd "C-x C-x") #'custom/search-in-region)

#+end_src

**** Multiple cursors

#+begin_src emacs-lisp

;; M-RET: multiple-cursors-mode
(define-key swiper-map (kbd "M-<return>") 'swiper-mc)

#+end_src
** Completion
*** Ivy

#+begin_src emacs-lisp

;; Ivy completion framework
(use-package counsel)
(use-package ivy
  :delight ivy-mode
  :bind (:map ivy-minibuffer-map
	      ("TAB" . ivy-alt-done)
	      ("C-l" . ivy-alt-done)
	      ("C-j" . ivy-next-line)
	      ("C-k" . ivy-previous-line)
	      :map ivy-switch-buffer-map
	      ("C-k" . ivy-previous-line)
	      ("C-l" . ivy-done)
	      ("C-d" . ivy-switch-buffer-kill)
	      :map ivy-reverse-i-search-map
	      ("C-k" . ivy-previous-line)
	      ("C-d" . ivy-reverse-i-search-kill))
  :init (ivy-mode 1))

;; Completion candidate descriptions
(use-package ivy-rich
  :bind
  (("<menu>" . counsel-M-x))
  :init (ivy-rich-mode 1))

#+end_src
*** Command suggestions

#+begin_src emacs-lisp

;; Command suggestions
(use-package which-key
  :delight which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1.0))

#+end_src
** Documentation

#+begin_src emacs-lisp

;; Replace description key bindings by their helpful equivalents
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command]  . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key]      . helpful-key))

#+end_src
** Live command display

#+begin_src emacs-lisp

(use-package command-log-mode
  :delight command-log-mode)
(global-command-log-mode)

#+end_src

* Navigation
** Text

#+begin_src emacs-lisp

;; Return to indentation
(global-set-key (kbd "S-<home>") 'back-to-indentation)

#+end_src

** Buffer
*** Counsel

#+begin_src emacs-lisp

;; Counsel buffer switching
(global-set-key (kbd "C-x b") 'counsel-switch-buffer)

#+end_src

*** Split and follow

#+begin_src emacs-lisp

;; Split and follow
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+end_src

** Frame

#+begin_src emacs-lisp

;; Create new frame
(global-set-key (kbd "C-S-n") 'make-frame-command)

#+end_src
** Escape

#+begin_src emacs-lisp

;; Make ESC quit present window and bury its buffer
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* Writing
** Narrowing

#+begin_src emacs-lisp

(global-set-key (kbd "C-`") 'widen)

#+end_src
** Undo, Redo
*** Undo Tree

#+begin_src emacs-lisp

;; Undo Tree
(use-package undo-tree
  :bind (("M-/" . undo-tree-visualize)
         :map undo-tree-visualizer-mode-map
         ("RET" . undo-tree-visualizer-quit)
         ("ESC" . undo-tree-visualizer-quit))
  :config
  (global-undo-tree-mode))

;; Visualize in side buffer
(defun custom/undo-tree-split-side-by-side (original-function &rest args)
  "Split undo-tree side-by-side"
  (let ((split-height-threshold nil)
        (split-width-threshold 0))
    (apply original-function args)))

(advice-add 'undo-tree-visualize :around #'custom/undo-tree-split-side-by-side)

;; ;; Undo tree command
;; (defun custom/undo-tree ()
;;   (interactive)
;;   (undo-tree-visualize))

;; (global-set-key (kbd "M-/") #'custom/undo-tree)

#+end_src

*** Kill Ring Size

#+begin_src emacs-lisp

;; Increase kill ring size
(setq kill-ring-max 200)

#+end_src
** Cut, Copy, Paste

#+begin_src emacs-lisp

;; Copy region with S-left click
(global-set-key (kbd "S-<mouse-1>")      'mouse-save-then-kill)
(global-set-key (kbd "S-<down-mouse-1>")  nil)

;; Paste with mouse right click
(global-set-key (kbd "<mouse-3>")        'yank)
(global-set-key (kbd "<down-mouse-3>")    nil)

#+end_src
* Coding
** Navigation
*** Defaults

#+begin_src emacs-lisp

;; Unset secondary overlay key bindings
(global-unset-key [M-mouse-1])
(global-unset-key [M-drag-mouse-1])
(global-unset-key [M-down-mouse-1])
(global-unset-key [M-mouse-3])
(global-unset-key [M-mouse-2])

;; Unset mouse bindings
(global-unset-key [C-mouse-1])
(global-unset-key [C-down-mouse-1])

#+end_src

*** Multiple cursors

#+begin_src emacs-lisp

;; Multiple cursors
(use-package multiple-cursors
  :bind (("C-."         . mc/mark-next-like-this)
	 ("C-;"         . mc/mark-previous-like-this)
	 ("C-<mouse-1>" . mc/add-cursor-on-click))
  )

;; Load package
(require 'multiple-cursors)

;; Unknown commands file
(setq mc/list-file "~/.emacs.d/mc-lists.el")

;; Return as usual
(define-key mc/keymap (kbd "<return>")       'electric-newline-and-maybe-indent)

;; Exit multiple-cursors-mode
(define-key mc/keymap (kbd "<escape>")       'multiple-cursors-mode)
(define-key mc/keymap (kbd "<mouse-1>")      'multiple-cursors-mode)
(define-key mc/keymap (kbd "<down-mouse-1>")  nil)

#+end_src
*** Smart comments

#+begin_src emacs-lisp

(defun custom/smart-comment ()
  "Comments out the current line if no region is selected.
If the cursor stands on an opening parenthesis and Emacs Lisp 
mode is active, the region of the corresponding s expression 
is selected and commented out.
If a region is selected, it comments out the region, from 
the start of the top line of the region, to the end to its 
last line."
  (interactive)
  (let (beg end)
    (if (region-active-p)

	;; If the beginning and end of the region are in
	;; the same line, select entire line
	(if (= (count-lines (region-beginning) (region-end)) 1)
	    (setq beg (line-beginning-position) end (line-end-position))
	  ;; Else, select region from the start of its first
	  ;; line to the end of its last.
          (setq beg (save-excursion (goto-char (region-beginning)) (line-beginning-position))
		end (save-excursion (goto-char (region-end)) (line-end-position))))
      
      ;; Else, select line
      (setq beg (line-beginning-position) end (line-end-position)))


    ;; Comment or uncomment region
    ;; If Org Mode is active
    (if (custom/in-mode "org-mode")
	(if (org-in-src-block-p)
	    ;; Manage Org Babel misbehavior with comment-or-uncomment-region
	    (org-comment-dwim (custom/active-region beg end))
	  (comment-or-uncomment-region beg end))
      ;; Else, proceed regularly
      (comment-or-uncomment-region beg end))

    ;; Move to the beginning of the next line
    (move-beginning-of-line 2)))

(global-set-key (kbd "M-;") #'custom/smart-comment)

#+end_src

*** Rectangular regions

#+begin_src emacs-lisp

;; Ensure rectangular-region-mode is loaded
(require 'rectangular-region-mode)

;; Save rectangle to kill ring
(define-key rectangular-region-mode-map (kbd "<mouse-3>") 'kill-ring-save)

;; Yank rectangle
(global-set-key (kbd "S-<mouse-3>") 'yank-rectangle)

;; Enter multiple-cursors-mode
(defun custom/rectangular-region-multiple-cursors ()
  (interactive)
  (rrm/switch-to-multiple-cursors)
  (deactivate-mark))

(define-key rectangular-region-mode-map (kbd "<return>") #'custom/rectangular-region-multiple-cursors)

;; Exit rectangular-region-mode
(define-key rectangular-region-mode-map (kbd "<escape>") 'rrm/keyboard-quit)
(define-key rectangular-region-mode-map (kbd "<mouse-1>") 'rrm/keyboard-quit)

#+end_src
*** Smart mouse rectangle

#+begin_src emacs-lisp

;; Multiple cursor rectangle definition mouse event
(defun custom/smart-mouse-rectangle (start-event)
  (interactive "e")
  (deactivate-mark)
  (mouse-set-point start-event)
  (set-rectangular-region-anchor)
  (rectangle-mark-mode +1)
  (let ((drag-event))
    (track-mouse
      (while (progn
               (setq drag-event (read-event))
               (mouse-movement-p drag-event))
        (mouse-set-point drag-event)))))

(global-set-key (kbd "M-<down-mouse-1>") #'custom/smart-mouse-rectangle)

#+end_src
** Emacs Lisp
*** Buffer evaluation

#+begin_src emacs-lisp

;; Create binding for evaluating buffer
(global-set-key (kbd "C-x e") 'eval-buffer)

#+end_src

*** Rainbow delimiters

#+begin_src emacs-lisp

;; Enable rainbow delimiters on all programming modes
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Templates
** yasnippet

#+begin_src emacs-lisp

;; yasnippet
(use-package yasnippet)

(yas-global-mode 1)

#+end_src

*** Snippets

#+begin_src emacs-lisp

;; yasnippet-snippets
(use-package yasnippet-snippets)

#+end_src

*** Require < to load snippet

#+begin_src emacs-lisp

;; Require < to load snippet
(defun custom/<-snippet (_orig-fun &rest args)
  (interactive)
  (setq line (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
  (print args)
	(if (not (string-equal line ""))
	    (if (string-equal (substring line 0 1) "<")
		(progn (save-excursion (move-beginning-of-line nil)
				       (right-char 1)
				       (delete-region (line-beginning-position) (point)))
		       (apply _orig-fun args)))))

(advice-add 'yas-expand :around #'custom/<-snippet)

#+end_src

* Git

#+begin_src emacs-lisp

(use-package magit)

#+end_src

* LaTeX
* Org Mode

#+begin_src emacs-lisp

;; Load Org Mode
(use-package org
  :delight org-indent-mode)

#+end_src

** Lists

#+begin_src emacs-lisp

;; List indentation
(setq-default org-list-indent-offset 1)

#+end_src

** Inline images
*** Startup

#+begin_src emacs-lisp

;; Render inline images when opening org files
(setq org-startup-with-inline-images t)

#+end_src

** Structure templates

#+begin_src emacs-lisp

;; Required as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
(add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py"  . "src python"))

#+end_src

** Keep text selection after executing commands

#+begin_src emacs-lisp

(defun custom/with-mark-active (&rest args)
  "Keep mark active after command. To be used as advice AFTER any
function that sets `deactivate-mark' to t."
  (setq deactivate-mark nil))

(advice-add 'org-metaright      :after #'custom/with-mark-active)
(advice-add 'org-metaleft       :after #'custom/with-mark-active)
(advice-add 'org-metaup         :after #'custom/with-mark-active)
(advice-add 'org-metadown       :after #'custom/with-mark-active)

(advice-add 'org-shiftmetaright :after #'custom/with-mark-active)
(advice-add 'org-shiftmetaleft  :after #'custom/with-mark-active)
(advice-add 'org-shiftmetaup    :after #'custom/with-mark-active)
(advice-add 'org-shift-metadown :after #'custom/with-mark-active)

#+end_src
** LaTeX
*** Equation preview format

#+begin_src emacs-lisp

;; SVG LaTeX equation preview
(setq org-latex-create-formula-image-program 'dvisvgm)

#+end_src

*** Equation preview directory

#+begin_src emacs-lisp

;; Theme-specific LaTeX preview directory
(defun custom/latex-preview-directory ()
  (setq org-preview-latex-image-directory
   (concat config-directory "tmp/" "ltximg/" (custom/current-theme) "/")))

#+end_src

*** Equation preview reload hook

#+begin_src emacs-lisp

;; Reload LaTeX equation previews
(defun custom/latex-preview-reload ()
  "Reload all LaTeX previews in buffer,
ensuring the LaTeX preview directory
matches the current theme."
  (if (custom/in-mode "org-mode")
      (progn (org-latex-preview '(64))
	           (custom/latex-preview-directory)
		   (org-latex-preview '(16)))))

(add-hook 'org-mode-hook #'custom/latex-preview-reload)

#+end_src

*** Disable preview when cursor lies on equation

#+begin_src emacs-lisp

;; org-fragtog
(use-package org-fragtog)

(add-hook 'org-mode-hook 'org-fragtog-mode)

#+end_src

** Org Babel
*** Languages

#+begin_src emacs-lisp

;; Language packages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python     . t)))

#+end_src

*** Auto-tangle

#+begin_src emacs-lisp

;; Trigger org-babel-tangle when saving any org files in the config directory
(setq source-regex (list ".org" (replace-regexp-in-string "~" "/root" config-directory)))

(defun custom/org-babel-tangle-config()
  "Call org-babel-tangle when the Org  file in the current buffer is located in the config directory"
     (if (custom/match-regexs (expand-file-name buffer-file-name) source-regex)
     ;; Tangle ommitting confirmation
     (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle)))
)
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'custom/org-babel-tangle-config)))

#+end_src

*** Code block bleeding

#+begin_src emacs-lisp

(defun custom/org-fix-bleed-end-line-block (from to flag spec)
  "Toggle fontification of last char of block end lines when cycling.

This avoids the bleeding of `org-block-end-line' when block is
folded."
  (when (and (eq spec 'org-hide-block)
             (/= (point-max) to))
    (save-excursion
      (if flag
          (font-lock-unfontify-region to (1+ to))
        (font-lock-flush to (1+ to))))))

(advice-add 'org-flag-region :after #'custom/org-fix-bleed-end-line-block)

(defun custom/org-fix-bleed-end-line-cycle (state)
  "Toggle fontification of last char of block lines when cycling.

This avoids the bleeding of `org-block-end-line' when outline is
folded."
  (save-excursion
    (when org-fontify-whole-block-delimiter-line
      (let ((case-fold-search t)
            beg end)
        (cond ((memq state '(overview contents all))
               (setq beg (point-min)
                     end (point-max)))
              ((memq state '(children folded subtree))
               (setq beg (point)
                     end (org-end-of-subtree t t))))
        (when beg           ; should always be true, but haven't tested enough
          (goto-char beg)
          (while (search-forward "#+end" end t)
            (end-of-line)
            (unless (= (point) (point-max))
              (if (org-invisible-p (1- (point)))
                  (font-lock-unfontify-region (point) (1+ (point)))
                (font-lock-flush (point) (1+ (point)))))))))))

(add-hook 'org-cycle-hook #'custom/org-fix-bleed-end-line-cycle)

#+end_src
*** Code block execution

#+begin_src emacs-lisp

(global-set-key (kbd "C-x C-x") 'org-babel-execute-src-block)

#+end_src
*** Code block indentation

#+begin_src emacs-lisp

;; Set indentation of code blocks to 0
(setq org-edit-src-content-indentation 0)

;; Indent code blocks appropriately when inside headers
(setq org-src-preserve-indentation     nil)

;; Make code indentation reasonable
(setq org-src-tab-acts-natively        t)

#+end_src

*** Code-block execution confirmation

#+begin_src emacs-lisp

;; Suppress security confirmation when evaluating code
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("emacs-lisp" "python"))))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

#+end_src

** Org Agenda
*** Setup

#+begin_src emacs-lisp

;; Org Agenda log mode
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)

;; Org Agenda week view key binding
(global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda)))

;; Restart Org Agenda
(defun custom/org-agenda-restart ()
  (interactive)
  (org-agenda-quit) 
  (org-agenda))

;; Mark items as done
(defun custom/org-agenda-todo-done ()
  (interactive)
  (org-agenda-todo 'done))

;; Set custom Org Agenda key bindings
(defun custom/org-agenda-custom-bindings ()
  ;; (local-set-key (kbd "<escape>") 'org-agenda-quit)
  (local-set-key (kbd "C-a") #'custom/org-agenda-restart)
  (local-set-key (kbd "d")   #'custom/org-agenda-todo-done))

(add-hook 'org-agenda-mode-hook 'custom/org-agenda-custom-bindings)

#+end_src

*** Agenda files

#+begin_src emacs-lisp

;; Set Org Agenda files
(setq org-agenda-files '("~/.emacs.d/tasks.org"
			 "~/.emacs.d/contacts.org"))

#+end_src

*** Global tags

#+begin_src emacs-lisp

(setq org-tag-alist
      '((:startgroup)
	;; Put mutually exclusive tags here
	(:endgroup)
	("@errand"  . ?E)
	("@home"    . ?H)
	("@work"    . ?W)
	("agenda" . ?a)
	("planning" . ?p)
	("publish"  . ?P)
	("batch"    . ?b)
	("note"     . ?n)
	("idea"     . ?i)))

#+end_src

*** Keyword sequences

#+begin_src emacs-lisp

;; Define TODO keyword sequences
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(r)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

#+end_src

*** Custom agenda views

#+begin_src emacs-lisp

;; Configure custom agenda views
(setq org-agenda-custom-commands
      
      '(("d" "Dashboard"
	 ((agenda "" ((org-deadline-warning-days 7)))
	  (todo "NEXT"
		((org-agenda-overriding-header "Next Tasks")))
	  (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
	
	("n" "Next Tasks"
	 ((todo "NEXT"
		((org-agenda-overriding-header "Next Tasks")))))

 	("W" "Work Tasks" tags-todo "+work-email")

	("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	 ((org-agenda-overriding-header "Low Effort Tasks")
	  (org-agenda-max-todos 20)
	  (org-agenda-files org-agenda-files)))

	("w" "Workflow Status"
	 ((todo "WAIT"
		((org-agenda-overriding-header "Waiting on External")
		 (org-agenda-files org-agenda-files)))
	  (todo "REVIEW"
		((org-agenda-overriding-header "In Review")
		 (org-agenda-files org-agenda-files)))
	  (todo "PLAN"
		((org-agenda-overriding-header "In Planning")
		 (org-agenda-todo-list-sublevels nil)
		 (org-agenda-files org-agenda-files)))
	  (todo "BACKLOG"
		((org-agenda-overriding-header "Project Backlog")
		 (org-agenda-todo-list-sublevels nil)
		 (org-agenda-files org-agenda-files)))
	  (todo "READY"
		((org-agenda-overriding-header "Ready for Work")
		 (org-agenda-files org-agenda-files)))
	  (todo "ACTIVE"
		((org-agenda-overriding-header "Active Projects")
		 (org-agenda-files org-agenda-files)))
	  (todo "COMPLETED"
		((org-agenda-overriding-header "Completed Projects")
		 (org-agenda-files org-agenda-files)))
	  (todo "CANC"
		((org-agenda-overriding-header "Cancelled Projects")
		 (org-agenda-files org-agenda-files)))))))

#+end_src

* Theme

#+begin_src emacs-lisp

(require 'theme (concat config-directory "theme.el"))

#+end_src

** Theme-agnostic enabling hook


#+begin_src emacs-lisp

;; Theme-agnostic enabling hook
(defvar after-enable-theme-hook nil
   "Normal hook run after enabling a theme.")

(defun run-after-enable-theme-hook (&rest _args)
   "Run `after-enable-theme-hook'."
   (run-hooks 'after-enable-theme-hook))

;; enable-theme
(advice-add 'enable-theme :after #'run-after-enable-theme-hook)

#+end_src

*** Org Mode

#+begin_src emacs-lisp

;; Reload Org Mode
(defun custom/org-theme-reload ()
  (if (custom/in-mode "org-mode")
      (org-mode)))

(add-hook 'after-enable-theme-hook #'custom/org-theme-reload)

#+end_src

* Declare

#+begin_src emacs-lisp

;; Conclude initialization file
(provide 'init)

#+end_src
